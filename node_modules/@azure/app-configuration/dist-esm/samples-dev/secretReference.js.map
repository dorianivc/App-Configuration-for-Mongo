{"version":3,"file":"secretReference.js","sourceRoot":"","sources":["../../samples-dev/secretReference.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary SecretReference represents a configuration setting that references as KeyVault secret.\n *\n * @azsdk-weight 30\n */\nimport {\n  AppConfigurationClient,\n  SecretReferenceValue,\n  secretReferenceContentType,\n  ConfigurationSetting,\n  parseSecretReference\n} from \"@azure/app-configuration\";\nimport { SecretClient } from \"@azure/keyvault-secrets\";\nimport { DefaultAzureCredential } from \"@azure/identity\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(`Running secretReference sample`);\n  const secretReference: ConfigurationSetting<SecretReferenceValue> = {\n    key: `secret${new Date().getTime()}`,\n    value: {\n      secretId: `secret-key${Math.ceil(100 + Math.random() * 900)}`\n    },\n    isReadOnly: false,\n    contentType: secretReferenceContentType\n  };\n\n  if (\n    !process.env[\"AZURE_TENANT_ID\"] ||\n    !process.env[\"AZURE_CLIENT_ID\"] ||\n    !process.env[\"AZURE_CLIENT_SECRET\"] ||\n    !process.env[\"KEYVAULT_URI\"]\n  ) {\n    console.log(\n      `At least one of the AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, and KEYVAULT_URI variables is not present, \n      please add the missing ones in your environment and rerun the sample.`\n    );\n    return;\n  }\n  // DefaultAzureCredential expects the following three environment variables:\n  // - AZURE_TENANT_ID: The tenant ID in Azure Active Directory\n  // - AZURE_CLIENT_ID: The application (client) ID registered in the AAD tenant\n  // - AZURE_CLIENT_SECRET: The client secret for the registered application\n  const credential = new DefaultAzureCredential();\n  const url = process.env[\"KEYVAULT_URI\"] || \"<keyvault-url>\";\n\n  const secretClient = new SecretClient(url, credential);\n  // Create a secret\n  console.log(\n    `Create a keyvault secret with key: ${secretReference.value.secretId} and value: \"MySecretValue\"`\n  );\n  await secretClient.setSecret(secretReference.value.secretId, \"MySecretValue\");\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const appConfigClient = new AppConfigurationClient(connectionString);\n\n  await cleanupSampleValues([secretReference.key], appConfigClient);\n\n  console.log(\n    `Add a new secretReference with key: ${secretReference.key} and secretId: ${secretReference.value.secretId}`\n  );\n  await appConfigClient.addConfigurationSetting(secretReference);\n\n  console.log(`Get the added secretReference from App Config with key: ${secretReference.key}`);\n  const getResponse = await appConfigClient.getConfigurationSetting({\n    key: secretReference.key\n  });\n\n  // You can use the `isSecretReference` global method to check if the content type is secretReferenceContentType (\"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\")\n  const parsedSecretReference = parseSecretReference(getResponse);\n  // Read the secret we created\n  const secret = await secretClient.getSecret(parsedSecretReference.value.secretId);\n  console.log(`Get the secret from keyvault key: ${secret.name}, value: ${secret.value}`);\n\n  console.log(`Deleting the secret from keyvault`);\n  await secretClient.beginDeleteSecret(parsedSecretReference.value.secretId);\n\n  await cleanupSampleValues([secretReference.key], appConfigClient);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\")\n  });\n\n  for await (const setting of settingsIterator) {\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\n/**\n * Returns the environment variable, throws an error if not defined.\n *\n * @export\n * @param {string} name\n */\nexport function getEnvVar(name: string) {\n  const val = process.env[name];\n  if (!val) {\n    throw `Environment variable ${name} is not defined.`;\n  }\n  return val;\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}